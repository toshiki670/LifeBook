"""
表示設定のDTO
"""
type AppearanceSettingsDto {
	theme: String!
}

"""
Book DTO - GraphQLレスポンス用
"""
type BookDto {
	id: Int!
	title: String!
	author: String
	description: String
	publishedYear: Int
}

type BookMutation {
	"""
	新しい本を作成
	"""
	createBook(title: String!, author: String, description: String, publishedYear: Int): BookDto!
	"""
	本を更新
	"""
	updateBook(id: Int!, title: String, author: String, description: String, publishedYear: Int): BookDto!
	"""
	本を削除
	"""
	deleteBook(id: Int!): Boolean!
}

type BookQuery {
	"""
	すべての本を取得
	"""
	books: [BookDto!]!
	"""
	IDで本を取得
	"""
	book(id: Int!): BookDto
}

"""
データベース設定のDTO
"""
type DatabaseSettingsDto {
	databaseDirectory: String!
}

"""
一般設定のDTO
"""
type GeneralSettingsDto {
	language: String!
}

type MutationRoot {
	"""
	Libraryコンテキストのミューテーション
	"""
	library: BookMutation!
	"""
	Settingsコンテキストのミューテーション
	"""
	settings: SettingsMutation!
}

type QueryRoot {
	"""
	Libraryコンテキストへのアクセス
	"""
	library: BookQuery!
	"""
	Settingsコンテキストへのアクセス
	"""
	settings: SettingsQuery!
}

type SettingsMutation {
	"""
	一般設定を更新
	"""
	updateGeneralSettings(language: String): GeneralSettingsDto!
	"""
	表示設定を更新
	"""
	updateAppearanceSettings(theme: String): AppearanceSettingsDto!
	"""
	データベース設定を更新
	"""
	updateDatabaseSettings(databaseDirectory: String): DatabaseSettingsDto!
	"""
	すべての設定をリセット
	"""
	resetSettings: Boolean!
}

type SettingsQuery {
	"""
	一般設定を取得
	"""
	generalSettings: GeneralSettingsDto!
	"""
	表示設定を取得
	"""
	appearanceSettings: AppearanceSettingsDto!
	"""
	データベース設定を取得
	"""
	databaseSettings: DatabaseSettingsDto!
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: QueryRoot
	mutation: MutationRoot
}
